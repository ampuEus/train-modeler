---
type Props = {
  title: string
  event_update: string
};

const { title, event_update } = Astro.props;
---

<!-- Component HTML -->
<my-chart
data-title={title}
data-event_update={event_update}>
  <div>
    <canvas></canvas>
    <button>Reset zoom</button>
  </div>
</my-chart>

<script>
  import { Chart } from '@node_modules/chart.js/auto';
  import zoomPlugin from '@node_modules/chartjs-plugin-zoom';

  customElements.define('my-chart', class MyDiv extends HTMLElement {
    constructor() {
      super()
      const title = this.dataset.title
      const event_update = this.dataset.event_update
      this.chart = this.drawDefaultChart(title)

      const reset_button = this.querySelector("button");
      reset_button.addEventListener('click', () => {this.chart.resetZoom();});

      document.addEventListener(event_update, this.handleEventUpdate.bind(this));
    }

    drawDefaultChart(title) {
      const ctx = this.querySelector("canvas").getContext('2d');
      Chart.register(zoomPlugin);
      const chart = new Chart(ctx, {
        type: 'line',
        data: {
          datasets: []
        },
        options: {
          plugins: {
            title: {
              display: true,
              text: title,
            },
            zoom: {
              limits: {
                y: {}
              },
              zoom: {
                mode: 'xy',
                drag: {
                  enabled: true,
                },
                wheel: {
                  enabled: true,
                }
              },
              pan: {
                enabled: true,
                mode: 'xy',
                modifierKey: 'shift',
              }
            }
          },
          scales: {
            x: {
              type: "linear",
              title: {
                display: true,
                text: ""
              }
            },
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: ""
              }
            }
          },
          interaction: {
            intersect: false,
            axis: 'x',
            mode: 'nearest',
          },
        }
      });
      return chart
    }

    handleEventUpdate(event) {
      // Event handler for external updates
      const datasets = event.detail.datasets;
      if (this.chart) {
        // chart.data.labels = axe_x;
        this.chart.data.datasets = [];  // Clear previous datasets
        // Add a dataset for each set of y values
        datasets.forEach(dataset => {
          this.chart.data.datasets.push({
            label: dataset.label,
            data: dataset.data,
          });
        });
        this.chart.update();
        this.chart.resetZoom();
        this.chart.options.plugins.zoom.limits.y.max = this.chart.scales.y.max;
        this.chart.options.plugins.zoom.limits.y.min = this.chart.scales.y.min;
        this.chart.update();
      }
    }
  });

</script>
