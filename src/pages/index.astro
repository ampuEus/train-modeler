---
import Layout from "@/layouts/Layout.astro";
import DataInput from "@/components/DataInput.astro";
import CheckboxDataInput from "@/components/CheckboxDataInput.astro";
import Chart from "@/components/Chart.astro";

const updatePowerChart = "power-force"
const updateResistanceChart = "resistance"
---

<Layout >
  <form
  id="trainData"
  data-update_power_chart={updatePowerChart}
  data-update_resistance_chart={updateResistanceChart}>
    <DataInput name="gravity" label="Gravity [m/s^2]: " default_value={9.806}/>
    <DataInput name="rho" label="ρ [kg/m^3]: " default_value={1.225} tooltip="Air density under standard conditions"/>

    <DataInput name="vel_max" label="Train maximum velocity [km/h]: "/>
    <DataInput name="vel_1v" label="Train 1/v motor point velocity [km/h]: " tooltip="speed on 1/v point"/>
    <DataInput name="pow_max" label="Train maximum power [kW]: "/>
    <DataInput name="torq_max" label="Train maximum torque [kN]: "/>

    <DataInput name="mass" label="Train weight [kg]: "/>
    <DataInput name="mass_rotating" label="Rotating mass constant [-]: " tooltip="Mass increasing for rotating masses"/>
    <DataInput name="wheel_diam" label="Train wheel diameter new [mm]: " tooltip="Wheel diameter on new conditions"/>
    <DataInput name="wheel_diam_old" label="Train wheel diameter old[mm]: " tooltip="Wheel diameter on used conditions"/>
    <DataInput name="cr" label="Train weight [-]: "/>
    <DataInput name="cc" label="Train weight [-]: "/>
    <DataInput name="cx" label="Train weight [-]: "/>
    <DataInput name="surface" label="Train surface [m^2]: "/>
    <DataInput name="axles" label="Train motorized axles [-]: "/>
    <CheckboxDataInput name="slope" label_checkbox="Add slope to path"  label="[‰]: " tooltip="10 meter up on 100 meter line"/>
    <DataInput name="ar" label="Radial acceleration [-]: "/>

    <button type="submit" >Calculate</button>
    <button type="reset">Reset</button>
    <button type="button" id="exportDataBtn">Export data</button>
    <button type="button" id="importDataBtn">Import data</button>
    <input type="file" accept=".csv" id="importData" style="display: none;">
  </form>
  <pre id="output"></pre>
  <div>
    <Chart title="Power-Force Curves" event_update={updatePowerChart}/>
    <Chart title="Resistance Curves" event_update={updateResistanceChart}/>
  </div>
</Layout>

<script>
  import { exportData } from "@utils/form";

  const exportBtn = document.getElementById('exportDataBtn') as HTMLButtonElement | null;
  if (!exportBtn) throw new Error('Export button not found in the DOM.');

  exportBtn.addEventListener('click', (event: MouseEvent) => {
    try {
      exportData();
    } catch (error) {
      console.error('Error while exporting data:', error);
      alert('Something went wrong while exporting data. Please try again.');
    }
  });
</script>

<script>
  import { importData } from "@utils/form";

  const inputBtn = document.getElementById('importDataBtn') as HTMLButtonElement | null;
  const inputFile = document.getElementById('importData') as HTMLInputElement | null;
  if (!inputBtn || !inputFile) throw new Error('Required DOM elements not found.');

  inputBtn.addEventListener('click', () => {
    inputFile.click();
  });

  inputFile.addEventListener('change', () => {
    const file = inputFile.files?.[0];
    if (!file){
      alert('No file selected');
      return false
    }
    importData(file)
    return true
  });
</script>

<script>

import { getFormDataAsObject } from "@utils/form";
import { getPowerSpeedCurve } from "@utils/train_model.ts";
import { getTorqueSpeedCurve } from "@utils/train_model.ts";
import { getResistance } from "@utils/train_model.ts";
import { getVmax } from "@utils/train_model.ts";
import { renameKeys } from "@utils/utils.ts";
import { update_chart } from "@utils/charts.ts";

const form = document.getElementById("trainData") as HTMLFormElement | null;
// if (!form instanceof HTMLFormElement){
//   throw new Error ("Form element with id 'trainData' not found.")
// }
form.addEventListener("submit", function(event) {
  event.preventDefault();

  const data = getFormDataAsObject(this)

  const vels = Array.from({ length: Math.ceil(data.vel_max + data.vel_max / 2) }, (_, i) => i);
  const pow = getPowerSpeedCurve(data.pow_max, data.vel_1v, vels);
  const torq = getTorqueSpeedCurve(data.torq_max, pow, data.vel_1v);

  const {r_total, r_5} = getResistance(data, vels, false, false, false, false)
  const point1 = getVmax(torq, r_total)
  console.log("p1: " + point1)
  const point2 = getVmax(torq, r_5)
  console.log("p2: " + point1)
  const null_point = {x: null, y: null}
  const point_arr = [point1, null_point, point2]

  const chart_pow = renameKeys(pow, "vel", "pow")
  const chart_torq = renameKeys(torq, "vel", "torq")
  const resis = renameKeys(r_total, "vel", "resis")
  const resis_5 = renameKeys(r_5, "vel", "resis")

  update_chart(
    document,
    this.dataset.update_power_chart,
    [{label: "Power", data: chart_pow},
    {label: "Torque", data: chart_torq}])
  update_chart(
    document,
    this.dataset.update_resistance_chart,
    [{label: "V max", data: point_arr},
    {label: "Torque", data: chart_torq},
    {label: "Resistance", data: resis},
    {label: "Resistance 5%", data: resis_5}])
});
</script>
